import streamlit as st
import ollama
import sqlite3
import hashlib
import json

# --- Database Setup and User Management ---
def init_db():
    """
    Initializes the SQLite database and creates user, chat history, and health data tables.
    The user_health_data table stores health information for each user.
    """
    conn = sqlite3.connect('personal_health_ai.db')
    cursor = conn.cursor()
    
    # Create users table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL
        )
    ''')
    
    # Create chat_history table with a foreign key to users
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS chat_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            role TEXT,
            content TEXT,
            FOREIGN KEY(user_id) REFERENCES users(id)
        )
    ''')

    # New table for user health data
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_health_data (
            user_id INTEGER PRIMARY KEY,
            data_json TEXT,
            FOREIGN KEY(user_id) REFERENCES users(id)
        )
    ''')
    
    conn.commit()
    conn.close()

def hash_password(password):
    """Hashes a password using SHA-256."""
    return hashlib.sha256(password.encode()).hexdigest()

def register_user(username, password):
    """Registers a new user and initializes their health data."""
    conn = sqlite3.connect('personal_health_ai.db')
    cursor = conn.cursor()
    try:
        hashed_password = hash_password(password)
        cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_password))
        user_id = cursor.lastrowid
        # Initialize an empty health data entry for the new user
        cursor.execute("INSERT INTO user_health_data (user_id, data_json) VALUES (?, ?)", (user_id, json.dumps({})))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô")
        return False
    finally:
        conn.close()

def authenticate_user(username, password):
    """Authenticates a user."""
    conn = sqlite3.connect('personal_health_ai.db')
    cursor = conn.cursor()
    hashed_password = hash_password(password)
    cursor.execute("SELECT id FROM users WHERE username = ? AND password = ?", (username, hashed_password))
    user = cursor.fetchone()
    conn.close()
    if user:
        return user[0]
    return None

def save_message(user_id, role, content):
    """Saves a message to the database for a specific user."""
    conn = sqlite3.connect('personal_health_ai.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO chat_history (user_id, role, content) VALUES (?, ?, ?)", (user_id, role, content))
    conn.commit()
    conn.close()

def load_messages(user_id):
    """Loads all messages for a specific user from the database."""
    conn = sqlite3.connect('personal_health_ai.db')
    cursor = conn.cursor()
    cursor.execute("SELECT role, content FROM chat_history WHERE user_id = ? ORDER BY id", (user_id,))
    messages = [{"role": row[0], "content": row[1]} for row in cursor.fetchall()]
    conn.close()
    return messages

def save_health_data(user_id, health_data):
    """Saves user's health data to the database."""
    conn = sqlite3.connect('personal_health_ai.db')
    cursor = conn.cursor()
    data_json = json.dumps(health_data, ensure_ascii=False)
    cursor.execute("REPLACE INTO user_health_data (user_id, data_json) VALUES (?, ?)", (user_id, data_json))
    conn.commit()
    conn.close()

def load_health_data(user_id):
    """Loads user's health data from the database."""
    conn = sqlite3.connect('personal_health_ai.db')
    cursor = conn.cursor()
    cursor.execute("SELECT data_json FROM user_health_data WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    if result and result[0]:
        return json.loads(result[0])
    return {}

# --- Streamlit App UI Pages ---
def login_register_page():
    """Displays the login/register UI."""
    st.title("‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà AI ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß! ü©∫")
    st.markdown("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    st.markdown("---")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
        with st.form("login_form"):
            username = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
            password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
            submitted = st.form_submit_button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
            if submitted:
                user_id = authenticate_user(username, password)
                if user_id:
                    st.session_state.logged_in = True
                    st.session_state.user_id = user_id
                    st.session_state.username = username
                    st.session_state.messages = load_messages(user_id)
                    st.session_state.health_data = load_health_data(user_id)
                    st.session_state.show_health_form = not bool(st.session_state.health_data)
                    st.rerun()
                else:
                    st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    with col2:
        st.subheader("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô")
        with st.form("register_form"):
            new_username = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà")
            new_password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password")
            submitted = st.form_submit_button("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô")
            if submitted:
                if new_username and new_password:
                    if register_user(new_username, new_password):
                        st.success("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
                else:
                    st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô")


def health_data_form_page():
    """Page to collect initial health data or allow updating."""
    st.title("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    st.markdown("‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")

    current_data = st.session_state.health_data

    with st.form("health_form"):
        # Personal Information
        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")
        col1, col2, col3 = st.columns(3)
        with col1:
            gender = st.selectbox(
                "‡πÄ‡∏û‡∏®:",
                ["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", "‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"],
                index=["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", "‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"].index(current_data.get("‡πÄ‡∏û‡∏®", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"))
            )
        with col2:
            age = st.number_input("‡∏≠‡∏≤‡∏¢‡∏∏:", min_value=1, max_value=120, value=current_data.get("‡∏≠‡∏≤‡∏¢‡∏∏", 25))
        with col3:
            height = st.number_input("‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡∏ã‡∏°.):", min_value=100, max_value=250, value=current_data.get("‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á", 170))
            weight = st.number_input("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.):", min_value=30, max_value=300, value=current_data.get("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å", 65))

        # Lifestyle Information
        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå")
        col4, col5 = st.columns(2)
        with col4:
            activity_level = st.selectbox(
                "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô:",
                ["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", "‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å (‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)", "‡∏ô‡πâ‡∏≠‡∏¢ (‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ 3-5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)", "‡∏°‡∏≤‡∏Å (‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô)"],
                index=["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", "‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å (‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)", "‡∏ô‡πâ‡∏≠‡∏¢ (‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ 3-5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)", "‡∏°‡∏≤‡∏Å (‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô)"].index(current_data.get("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"))
            )
        with col5:
            dietary_preference = st.multiselect(
                "‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£:",
                ["‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "‡∏°‡∏±‡∏á‡∏™‡∏ß‡∏¥‡∏£‡∏±‡∏ï‡∏¥", "‡∏ß‡∏µ‡πÅ‡∏Å‡∏ô", "‡∏Ñ‡∏µ‡πÇ‡∏ï", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏•‡∏µ‡∏ô", "‡πÅ‡∏û‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•", "‡πÅ‡∏û‡πâ‡∏ô‡∏°", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"],
                default=current_data.get("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£", [])
            )
        
        st.subheader("‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)")
        med_conditions = st.multiselect(
            "‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß:",
            ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á", "‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à", "‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ï", "‡πÇ‡∏£‡∏Ñ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á", "‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏û‡πâ", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"],
            default=current_data.get("‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß", [])
        )
        medications = st.text_area(
            "‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏à‡∏≥:",
            value=current_data.get("‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏à‡∏≥", ""),
            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô, ‡∏¢‡∏≤‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î"
        )
        allergies = st.text_area(
            "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ (‡∏≠‡∏≤‡∏´‡∏≤‡∏£/‡∏¢‡∏≤):",
            value=current_data.get("‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ", ""),
            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏û‡πâ‡∏Å‡∏∏‡πâ‡∏á, ‡πÅ‡∏û‡πâ‡∏¢‡∏≤‡πÄ‡∏û‡∏ô‡∏¥‡∏ã‡∏¥‡∏•‡∏•‡∏¥‡∏ô"
        )
        
        submitted = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ä‡∏ó")
        
    if submitted:
        if "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" in [gender, activity_level]:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÄ‡∏û‡∏® ‡πÅ‡∏•‡∏∞ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")
        else:
            health_data = {
                "‡πÄ‡∏û‡∏®": gender,
                "‡∏≠‡∏≤‡∏¢‡∏∏": age,
                "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á": height,
                "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å": weight,
                "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°": activity_level,
                "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£": dietary_preference,
                "‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß": med_conditions,
                "‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏à‡∏≥": medications,
                "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ": allergies
            }
            save_health_data(st.session_state.user_id, health_data)
            st.session_state.health_data = health_data
            st.session_state.show_health_form = False
            st.rerun()

def chat_page():
    """Displays the main chatbot UI."""
    st.header(f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, ‡∏Ñ‡∏∏‡∏ì{st.session_state.username}! ü§ñ")
    
    # Initialize necessary session state variables
    if "is_generating" not in st.session_state:
        st.session_state.is_generating = False
    if "current_response" not in st.session_state:
        st.session_state.current_response = ""

    # --- Sidebar Menu for Health Profile ---
    st.sidebar.markdown("---")
    st.sidebar.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    if st.sidebar.button("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"):
        st.session_state.show_health_form = True
        st.rerun()
    
    if st.session_state.health_data:
        st.sidebar.json(st.session_state.health_data)
    else:
        st.sidebar.info("‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å")
    
    st.sidebar.markdown("---")
    if st.sidebar.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.rerun()

    # --- Chat Display Area ---
    # Display chat messages from history
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # --- Generation Logic ---
    if st.session_state.is_generating:
        # This block runs when a response is being generated
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            stop_button_pressed = st.button("‡∏´‡∏¢‡∏∏‡∏î‡∏Ñ‡∏¥‡∏î", key="stop_gen")
            
            try:
                OLLAMA_MODEL = "gpt-oss:20b"
                response_stream = ollama.chat(
                    model=OLLAMA_MODEL, 
                    messages=st.session_state.ollama_messages, 
                    stream=True
                )
                
                for chunk in response_stream:
                    if stop_button_pressed:
                        break
                    st.session_state.current_response += chunk['message']['content']
                    message_placeholder.markdown(st.session_state.current_response + "‚ñå")
                
                message_placeholder.markdown(st.session_state.current_response)

            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                st.error(f"‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• '{OLLAMA_MODEL}' ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô Ollama ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            
            # After generation (success or fail), save and reset state
            st.session_state.messages.append({"role": "assistant", "content": st.session_state.current_response})
            save_message(st.session_state.user_id, "assistant", st.session_state.current_response)
            
            # Reset the generation state
            st.session_state.is_generating = False
            st.session_state.current_response = ""
            st.rerun()

    # --- User Input Logic ---
    # This block runs only when not generating a response
    if not st.session_state.is_generating:
        if prompt := st.chat_input("‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á?"):
            # Prepare messages and start generation
            st.session_state.messages.append({"role": "user", "content": prompt})
            save_message(st.session_state.user_id, "user", prompt)
            
            # Build ollama messages
            user_health_profile = st.session_state.health_data
            system_prompt = (
    "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô"
    "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á:\n\n"
    f"{json.dumps(user_health_profile, ensure_ascii=False, indent=2)}\n\n"
    "‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á "
    "‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ "
    "‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô"
)
            ollama_messages = [
                {"role": "system", "content": system_prompt}
            ]
            ollama_messages.extend([{"role": m["role"], "content": m["content"]} for m in st.session_state.messages])
            
            # Save ollama messages to session state for the next rerun
            st.session_state.ollama_messages = ollama_messages
            
            # Set the flag to start generation
            st.session_state.is_generating = True
            st.rerun()
        
# --- Main App Logic ---
st.set_page_config(page_title="Personalized Health AI", layout="wide")
init_db()

# Initialize session state flags for navigation
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
if "show_health_form" not in st.session_state:
    st.session_state.show_health_form = False

# Logic to switch between pages
if st.session_state.logged_in:
    if st.session_state.show_health_form:
        health_data_form_page()
    else:
        chat_page()
else:
    login_register_page()
